# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: serverlesstradingplatform
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: trading-platform
service: trading-platform

provider:
  name: aws
  runtime: python3.8
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    DYNAMODB_ENDPOINT: http://localhost:8000

functions:
  processMarketData:
    handler: src.handlers.market_data.process
    events:
      - schedule: rate(5 minutes)

  executeTradeStrategy:
    handler: src.handlers.trade.execute
    events:
      - http:
          path: trade
          method: post

  analyzePerformance:
    handler: src.handlers.analysis.perform
    events:
      - s3:
          bucket: trading-data-${self:service}-${self:provider.stage}-${aws:accountId}
          event: s3:ObjectCreated:*

resources:
  Resources:
    TradingDataBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: trading-data-${self:service}-${self:provider.stage}-${aws:accountId}

    TradingDatabase:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: trading-table-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

plugins:
  - serverless-python-requirements
  - serverless-step-functions
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-step-functions-offline

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true

stepFunctions:
  stateMachines:
    tradingWorkflow:
      definition:
        StartAt: FetchMarketData
        States:
          FetchMarketData:
            Type: Task
            Resource:
              Fn::GetAtt: [ProcessMarketDataLambdaFunction, Arn]
            Next: ExecuteTradeStrategy
          ExecuteTradeStrategy:
            Type: Task
            Resource:
              Fn::GetAtt: [ExecuteTradeStrategyLambdaFunction, Arn]
            Next: AnalyzePerformance
          AnalyzePerformance:
            Type: Task
            Resource:
              Fn::GetAtt: [AnalyzePerformanceLambdaFunction, Arn]
            End: true